<?php

define('NMAIL_PATH', drupal_get_path('module', 'nmail'));

/************************************************************
          DRUPAL HOOKS
************************************************************/

function nmail_init()
{
  if($_SERVER['REDIRECT_URL'] == '/node/15233/nmail') {
    $_SERVER['REDIRECT_URL'] = 'node/15233/nmail';
  }
  
  if($_SERVER['REQUEST_URI'] == '/node/15233/nmail') {
    $_SERVER['REQUEST_URI'] = 'node/15233/nmail';
  }
}

/**
 * Implementation of hook_perm();
 */
function nmail_perm() {
  return array('administer node mail settings', 'access node mail');
}

/**
 * Implementation of hook_menu();
 */
function nmail_menu() {
  $items = array();

  $items['admin/settings/nodemail'] = array(
    'title'             => 'Node Mail',
    'page callback'     => 'nmail_setting',
    'access arguments'  => array('administer node mail settings'),
    'type'              => MENU_NORMAL_ITEM,
  );

  $items['node/%node/nmail'] = array(
    'title'             => 'Node Mail',
    'page callback'     => 'nmail_tab',
    'page arguments'    => array(1),
    'access callback'   => '_nmail_access_tab',
    'access arguments'  => array(1),
    'weight'            => 1,
    'type'              => MENU_LOCAL_TASK,
  );
	
  $items['node/%node/nmail/preview'] = array(
    'title'             => 'Node Mail Preview',
    'page callback'     => 'nmail_preview',
    'page arguments'    => array(1),
    'access callback'   => '_nmail_access_tab',
    'access arguments'  => array(1),
    'type'              => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_mail();
 */
function nmail_mail($key, &$message, $params) {
	switch($key) {
		case 'test':
      $message['subject'] = t('Node Mail Preview');
		  
		  $message['headers'] = array(
		    'From' => 'Node Mail <node@mail>', 
		    'MIME-Version' => '1.0',
		    'Content-Type' => 'text/html;charset=utf-8',
		  );
			
      if($params['body']) {
        $message['body'] = $params['body'];
        
        //cleanup
        unset($message['params']);
        
        $hook = 'nmail_email_alter';
        foreach(module_implements($hook) as $module) {
          $function = $module.'_'.$hook;
          $function($message, $params['node'], $key);
        }        
      }
		  
		  break;
	}
}

/**
 * Implementation of hook_nodeapi();
 */
function nmail_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'delete':
      db_query("DELETE FROM {nmail} WHERE nid = %d", $node->nid);
      break;
  }
}

/**
 * Implementation of hook_theme();
 */
function nmail_theme() {
	return array(
    'nmail_history' => array(
      'arguments' => array(
			  'type' => NULL,
				'history' => NULL,
			),
			'path' => NMAIL_PATH.'/theme',
			'template' => 'nmail_history',
		)
	);
}

/************************************************************
          CALLBACKS
************************************************************/

/**
 * Callback for admin/settings/nodemail
 */
function nmail_setting() {
  $output = '';
  
  $output .= drupal_get_form('nmail_settings_form', $node);
  
  return $output;
}

/**
 * Callback for node/%node/nmail
 */
function nmail_tab($node) {
	$output = '';
	
	$output .= drupal_get_form('nmail_action_form', $node);
	
	return $output;
}

/**
 * Callback for node/%node/nmail/preview
 */
function nmail_preview($node) {
  $output = '';
	
	if(arg(4) == 'debug') {
		nmail_generate_template($node, 'update');
	}
	
	$body = db_result(db_query("SELECT body FROM {nmail} WHERE nid = %d", $node->nid));

  if($body) {
  	$hook = 'nmail_email_body_alter';
    foreach(module_implements($hook) as $module) {
      $function = $module.'_'.$hook;
      $function($body, $node, 'preview');
    }
	}

  $output .= $body;
	
	echo $output;
	exit();
}

/************************************************************
          FORMS
************************************************************/

function nmail_settings_form() {
	$form = array();
	
	$form['nmail_content_types'] = array(
	  '#default_value' => variable_get('nmail_content_types', array()),
		'#description'   => t('Choose content types that can be previewed & queued through Node Mail.'),
		'#options'       => node_get_types('names'),
		'#title'         => t('Allowed content types'),
	  '#type'          => 'checkboxes',
	);
	
	return system_settings_form($form);
}

/**
 * Displayed on node/%node/nmail
 */
function nmail_action_form($form_state, $node) {
  drupal_add_js(NMAIL_PATH.'/js/nmail_preview.js');
	
	$history = nmail_get_history($node->nid);
  
	if(!$history) {
    nmail_generate_template($node, 'insert');
  } 
  elseif(1 || $node->changed > $history['last_render']) {
    nmail_generate_template($node, 'update');
  }
	
  global $user;
	
  $form_state['nid']      = $node->nid;
  $form_state['n_title']  = $node->title;
	
  $form['nid'] = array(
    '#type'           => 'hidden',
    '#value'          => $node->nid,
  );
	
  $form['value'] = array(
    '#prefix'         => '<div><p><b>',
    '#suffix'         => '</b></p></div>',
		'#value'          => t('Unique Issue ID: ').$node->nid,
  );
	
  $form['email'] = array(
    '#default_value'  => ($user->uid ? $user->mail : ""),
		'#description'    => t('Send a test newsletter to this email address. Multiple email addresses have to be seperated by a comma.'),
		'#maxlength'      => 255,
    '#required'       => TRUE,
		'#size'           => 40,
    '#title'          => t('Test Newsletter'),
    '#type'           => 'textfield',
  );
	
  $form['send'] = array(
    '#type'           => 'submit',
    '#value'          => t('Send test email'),
  );
  
  $form['preview'] = array(
    '#type'           => 'button',
    '#value'          => t('Preview email'),
  );

  $form['queue'] = array(
    '#submit'         => array('nmail_action_form_queue'),
    '#type'           => 'submit',
    '#value'          => t('Queue for sending'),
  );
  
  if(isset($history['queued'])) {
    foreach($history['queued'] as &$date) {
    	$date = format_date($date);
    }
		
    if(!empty($history['queued']) || 1) {
    	$types = node_get_types('names');
			
			$form['history'] = array(
			  '#value' => theme('nmail_history', $types[$node->type], $history['queued']),
			);
    }
  }
  
  return $form;  
}

/**
 * Submit handler for nmail_action_form();
 * Sends a test email.
 */
function nmail_action_form_submit($form, &$form_state) {
  $node = node_load($form_state['values']['nid']);
  $body = db_result(db_query("SELECT body FROM {nmail} WHERE nid = %d", $form_state['nid']));
  
  $message = drupal_mail('nmail', 'test', $form_state['values']['email'], language_default(), array('node' => $node, 'body' => $body), NULL, FALSE);
	
  $params = array('!recipient' => '<i>'.$form_state['values']['email'].'</i>');

  if(drupal_mail_send($message)) {  
    drupal_set_message(t('Test node mail sent to !recipient', $params));
	}
	else {
		drupal_set_message(t('Error sending test node mail to !recipient', $params));
	}

  header('Location: /node/'.$form_state['values']['nid'].'/nmail');
  exit();
}

/**
 * Submit handler for nmail_action_form();
 * Queues the node.
 */
function nmail_action_form_queue($form, &$form_state) {
  $history = nmail_get_history($form_state['nid']);
  $history['queued'][] = time();
  db_query("UPDATE {nmail} SET history = '%s' WHERE nid = %d", serialize($history['queued']), $form_state['nid']);
	
	$hook = 'nmail_queue';
  foreach(module_implements($hook) as $module) {
    $function = $module.'_'.$hook;
    $function(node_load($form_state['nid']));
  }
  
  header('Location: /node/'.$form_state['values']['nid'].'/nmail');
  exit();
}

/************************************************************
          API
************************************************************/

/**
 * Get the history of a newsletter.
 * Returns an array with the last timestamp the newsletter HTML was rendered as well as the timestamps the newsletter was
 * queued to be send out.
 */
function nmail_get_history($nid) {
  $res = db_query("SELECT last_render, history FROM {nmail} WHERE nid = %d", $nid);
  
	$data = db_fetch_object($res);
  if(!$data) {
    return FALSE;
  }
  
	$history = array();
  $history['last_render'] = $data->last_render;
  $data->history = unserialize($data->history);
  $history['queued'] = is_array($data->history) ? $data->history : array();
  
  return $history;
}

/**
 * Creates & saves a template for the specified $node and $op;
 * @param object $node
 * @param object $op
 * @return 
 * TODO - make user standard theme tpl system
 */
function nmail_generate_template($node, $op) {
	global $base_url;
	$paths = array();
	$paths[] = NMAIL_PATH.'/templates/nmail_'.$node->type;
	
	$image_path = $base_url .'/'. NMAIL_PATH.'/templates/images/';
	
	//template suggestions based on domain node is assigned to
	if(!empty($node->domains) && module_exists('domain')) {
		$domains = $node->domains;
		
		//generate a template suggestion based on the every domain this node is assigned to,
		//ignoring the 'main' domain, which defaults to the regular nmail_CONTENTTYPE file
	    $new = array();
			
			foreach($domains as $domain_id) {
				if($domain = domain_load($domain_id)) {
					$node_domains[] = $domain;
					foreach($paths as $path) {
						//add template by domain id
						  $new[] = $path.'_domain-'.$domain_id;
						
						//add template by subdomain name
						  $parts = explode('.', $domain['subdomain']);
						  $new[] = $path .'_domain-'. $parts[0];
							$node_domain = $parts[0];
					}
				}
			}
			
			$node->node_domains = $node_domains;
			$paths = array_merge($paths, $new);
	}
	
	//template suggestions based on article type
	if (!empty($node->field_article_type[0]['value'])) {
	  $paths[] = NMAIL_PATH.'/templates/nmail_'.$node->type .'_domain-'. $node->field_article_type[0]['value'];	
		$node_domain = $node->field_article_type[0]['value'];
	}
	
	$image_path = $image_path. $node_domain .'/';

	//find the first available template file; last-in first-out order
	$path = FALSE;
	foreach(array_reverse($paths) as $p) {
		$p .= '.tpl.php';
		if(file_exists($p)) {
			$path = $p;
			break;
		}
	}
	
	if(empty($path)) {
		drupal_set_message(t('Cannot generate node mail template. Template file does not exist.'), 'error');
    return FALSE;
	}
	
	//default vars for tpl
	$vars = array(
	  'node' => $node,
		'image_path' => $image_path
	);
	$node->newsletter_image_path = $image_path; //pass to nmail_generate_template functions without havning to add new var to all
	
	/** 
	 * TODO
	 * - allow other modules change to alter default vars (ie. have all the images in a separate module)
	 * - extend to allow other modules to provide own template so nmail is just an API
	 
	$hook = 'nmail_template_vars_alter';
	foreach(module_implements($hook) as $module) {
		$function = $module.'_'.$hook;
		$function($vars, $node, $op);
	}	*/
	
	//theme_render_template means we can use PHP & $node in the .tpl
	if($template = theme_render_template($path, $vars)) {  
		$hook = 'nmail_generate_template';
    foreach(module_implements($hook) as $module) {
	    $function = $module.'_'.$hook;
	    $function($template, $node, $op);
	  }

		switch($op) {
			case 'insert':
			  db_query("INSERT INTO {nmail} (nid, body, last_render) VALUES (%d, '%s', %d)", $node->nid, $template, $node->changed);	
				break;
				
			case 'update':
				//built-in security for editions that are already created before these updates
				if(db_result(db_query('SELECT COUNT(nid) FROM {nmail} WHERE nid = %d', $node->nid))) {
				  db_query("UPDATE {nmail} SET body = '%s', last_render = %d WHERE nid = %d", $template, $node->changed, $node->nid);
				}
				else {
				  db_query("INSERT INTO {nmail} (nid, body, last_render) VALUES (%d, '%s', %d)", $node->nid, $template, $node->changed);
				}
				
				break;
		}
	}
	else {
		drupal_set_message(t('Cannot read template: !file', array('!file' => $path)));
	}
}

/************************************************************
          INTERNAL
************************************************************/

/**
 * Access control for node mail tab
 */
function _nmail_access_tab($node) {
  return (in_array($node->type, variable_get('nmail_content_types', array())) && user_access('access node mail'));
}
